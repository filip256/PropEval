// Translate relaxed expressions and check if they are wff
// Created during an algorithm discution with Emanuel Bucur, Catalina Chirtes and Carla Vlaiconi
// On the second meeting Victor Deian Balutoiu joind the discution

class Node:

    symbol = ''
    father = -1
    leaf1 = -1
    leaf2 = -1
    value = False
    def __init__(self, symb, fath):
        self.symbol = symb
        self.father = fath
        
    def addSymbol(self, symb):
        if self.symbol == '':
            self.symbol = symb
            return True
        else:
            return False


def relaxedToStrong(inp):
    l = []
    for i in inp:
        l.append(i)
        
    #relaxed -> strong form
    # negations
    i = len(l) - 1
    while i > 0:
        if l[i-1] == '!':
            if l[i] >= 'A' and l[i] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i + 1, ')')
            else:
                j = i
                paranth = 0
                if l[j] == '(':
                    paranth = paranth + 1
                j += 1
                while j < len(l) - 1 and paranth != 0:
                    if l[j] == ')':
                        paranth = paranth - 1
                    elif l[j] == '(':
                        paranth = paranth + 1
                    j = j + 1
                l.insert(j, ')')
            l.insert(i - 1, '(')
        i = i - 1
    
    # disjunctions
    i = len(l) - 1
    while i > 0:
        if l[i-1] == 'v' or l[i-1] == '^':
            if l[i] >= 'A' and l[i] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i + 1, ')')
            else:
                j = i
                paranth = 0
                if l[j] == '(':
                    paranth = paranth + 1
                j += 1
                while j < len(l) - 1 and paranth != 0:
                    if l[j] == ')':
                        paranth = paranth - 1
                    elif l[j] == '(':
                        paranth = paranth + 1
                    j = j + 1
                l.insert(j, ')')
            if l[i-2] >= 'A' and l[i-2] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i - 2, '(')
            else:
                j -= 1
                while j > 0 and paranth != 0:
                    if l[j] == '(':
                        paranth = paranth - 1
                    elif l[j] == ')':
                        paranth = paranth + 1
                    j = j - 1
                l.insert(j + 1, '(')
        i = i - 1
        
    # implication
    i = len(l) - 1
    while i > 0:
        if l[i-1] == '>':
            if l[i] >= 'A' and l[i] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i + 1, ')')
            else:
                j = i
                paranth = 0
                if l[j] == '(':
                    paranth = paranth + 1
                j += 1
                while j < len(l) - 1 and paranth != 0:
                    if l[j] == ')':
                        paranth = paranth - 1
                    elif l[j] == '(':
                        paranth = paranth + 1
                    j = j + 1
                l.insert(j, ')')
            if l[i-2] >= 'A' and l[i-2] <= 'Z' or l[i] == 'f' or l == 't':
                l.insert(i - 2, '(')
            else:
                j = i - 2
                paranth = 0
                if l[j] == ')':
                    paranth = paranth + 1
                j -= 1
                while j > 0 and paranth != 0:
                    if l[j] == '(':
                        paranth = paranth - 1
                    elif l[j] == ')':
                        paranth = paranth + 1
                    j = j - 1
                l.insert(j + 1, '(')
        i = i - 1
        print(''.join(l))
        
    # equivalance
    i = len(l) - 1
    while i > 0:
        if l[i-1] == '=':
            if l[i] >= 'A' and l[i] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i + 1, ')')
            else:
                j = i
                paranth = 0
                if l[j] == '(':
                    paranth = paranth + 1
                j += 1
                while j < len(l) - 1 and paranth != 0:
                    if l[j] == ')':
                        paranth = paranth - 1
                    elif l[j] == '(':
                        paranth = paranth + 1
                    j = j + 1
                l.insert(j, ')')
            if l[i-2] >= 'A' and l[i-2] <= 'Z' or l[i] == 'f' or l[i] == 't':
                l.insert(i - 2, '(')
            else:
                j = i - 2
                paranth = 0
                if l[j] == ')':
                    paranth = paranth + 1
                j -= 1
                while j > 0 and paranth != 0:
                    if l[j] == '(':
                        paranth = paranth - 1
                    elif l[j] == ')':
                        paranth = paranth + 1
                    j = j - 1
                l.insert(j + 1, '(')
        i = i - 1
        
    # remove excess ()
    i = 0
    n = len(l)
    while i + 1 < n:
        if l[i] == '(' and l[i + 1] == '(':
            j = i + 2 
            paranth = 1
            while paranth != 0:
                if l[j] == '(':
                    paranth += 1
                elif l[j] == ')':
                    paranth -= 1
                j += 1
            if l[j] == ')':
                l.pop(j)
                l.pop(i)
                n -= 2
        i += 1
    
    string = '' 
    for i in l:
        string += i
    return string

def buildTree(string, pos, nodes, variables):
    ok = True
    for i in range(len(string)):
        if string[i] == '(':
            nod = Node('', pos)
            nodes.append(nod)
            nodes[pos].leaf1 = pos + 1
            pos += 1
        elif string[i] == ')':
            pos = nodes[pos].father

        elif string[i] >= 'A' and  string[i] <= 'Z':
            if nodes[pos].addSymbol(string[i]) == False:
                print("Error!1")
                ok = False
                break
            pos = nodes[pos].father
            if string[i] not in variables:
               variables.append(string[i])

        elif string[i] == 'f' or string[i] == 't':
            if nodes[pos].addSymbol(string[i]) == False:
                print("Error!1")
                ok = False
                break
            pos = nodes[pos].father
        elif string[i] == '!':
            if nodes[nodes[pos].father].addSymbol(string[i]) == False:
                print("Error!2")
                ok = False
                break
        elif string[i] in '>v^=':
            if nodes[pos].addSymbol(string[i]) == False:
                print("Error!3")
                ok = False
                break
            nod = Node('', pos)
            nodes.append(nod)
            nodes[pos].leaf2 = len(nodes) - 1
            pos = len(nodes) - 1
        else:
            print("Error!4")
            ok = False
            break
    
    for i in range(len(nodes)):
        if nodes[i].symbol == '':
            ok = False
            break
    if ok and pos == -1:
        print("Well-formed!")
    else:
        print("Error!")

def evaluate(pos, nodes, valueDict):

    if nodes[pos].symbol == 'f':
        return False

    elif nodes[pos].symbol == 't':
        return True

    elif nodes[pos].symbol >= 'A' and nodes[pos].symbol <= 'Z':
        return valueDict[nodes[pos].symbol]

    elif nodes[pos].symbol == '!':
        aux = evaluate(nodes[pos].leaf1, nodes, valueDict)
        return not aux

    elif nodes[pos].symbol == '^':
        aux1 = evaluate(nodes[pos].leaf1, nodes, valueDict)
        aux2 = evaluate(nodes[pos].leaf2, nodes, valueDict)
        return bool(aux1 * aux2)

    elif nodes[pos].symbol == 'v':
        aux1 = evaluate(nodes[pos].leaf1, nodes, valueDict)
        aux2 = evaluate(nodes[pos].leaf2, nodes, valueDict)
        return bool(aux1 + aux2)

    elif nodes[pos].symbol == '>':
        aux1 = evaluate(nodes[pos].leaf1, nodes, valueDict)
        aux2 = evaluate(nodes[pos].leaf2, nodes, valueDict)
        if aux1 == True and aux2 == False:
            return False
        return True

    elif nodes[pos].symbol == '=':
        aux1 = evaluate(nodes[pos].leaf1, nodes, valueDict)
        aux2 = evaluate(nodes[pos].leaf2, nodes, valueDict)
        if aux1 != aux2:
            return False
        return True
    
      

  
if __name__=='__main__':
    inp = input()
    
    string = relaxedToStrong(inp)

    print(string)
    
    #build tree
    pos = 0
    nodes = []
    nod = Node('', -1)
    nodes.append(nod)
    variables = []
    buildTree(string, pos, nodes, variables)

    #print nodes and leafs    
    for i in range(len(nodes)):
        print(i, nodes[i].symbol, nodes[i].leaf1, nodes[i].leaf2)

    print(variables)

    inter = input()

    valueDict = {}
    ok = True
    for i in range(len(inter)):
        if inter[i] == '!':
            ok = False
        if inter[i] >= 'A' and  inter[i] <= 'Z':
            if inter[i] in variables:
                valueDict[inter[i]] = ok
            ok = True

    print(evaluate(0, nodes, valueDict))

    #{P!QS!T}

